/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package principal;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertTrue;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.InputMismatchException;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

import org.junit.After;
import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.Timeout;
import org.junit.runners.MethodSorters;

/**
 * Esta clase esta preparada para testear el programa main principal de un proyecto
 * interceptando y suplantando tando la entrada como la salida estandar teclado
 * y pantalla
 * @author eserrano
 *
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class MainTest {
	
	private final PrintStream standardOut = System.out;
	private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();
	
	@Rule
	  public Timeout globalTimeout= new Timeout(200,TimeUnit.MILLISECONDS);
	
	@Before
	public void setUp() {
	    System.setOut(new PrintStream(outputStreamCaptor));
	}
	
	@Test
	public void test01CreacionArray() {
		String entradas = "10\n";
		setIn(entradas);
		
		int[] array = Main.creaArray();
		assertEquals(10, array.length);
		
	}
	
	@Test
	public void test02PoblarArray() {
		int [] expected = {50,3,15,1,62,25,140,7,8,63};
		String entradas = "";
		for (int i : expected) {
			entradas += i + "\n";
		}
		
		setIn(entradas);
		
		int[] array = new int[10];
		Main.poblarArray(array);
		assertArrayEquals(expected, array);
	}
	
	@Test
	public void test03OrdenarArray() {
		int [] array = {50,3,15,1,62,25,140,7,8,63};
		int [] ordenado = array.clone();
		Arrays.sort(ordenado);
		
		int [] ordenadoApp = Main.ordenaArray(array);
		assertNotSame(array, ordenadoApp);
		assertArrayEquals(ordenado, ordenadoApp);
	}
	
	@Test
	public void test04ImprimirArray() {
		int [] varios = {1,2,3};
		int [] vacio = {};
		int [] uno = {1};
			
		Main.imprimeArray(varios);
		Main.imprimeArray(vacio);
		Main.imprimeArray(uno);
		InputStream salida = new ByteArrayInputStream(outputStreamCaptor.toByteArray());
		Scanner lectorSalida = new Scanner(salida);
		assertEquals("[1,2,3]", lectorSalida.nextLine().replaceAll(" ", ""));
		assertEquals("[]", lectorSalida.nextLine().replaceAll(" ", ""));
		assertEquals("[1]", lectorSalida.nextLine().replaceAll(" ", ""));
		lectorSalida.close();
	}
	

	@Test
	public void test05MainBasico() {
		int tam = 50;
		String entradas = tam+"\n";
		int [] expected = new int [tam];
		int [] entrada = new int [tam];
		for (int i=0,j=tam; i<tam; i++,j--) {
			expected[i]=i+1;
			entrada[i]=j;
			entradas += j + "\n";
		}
		setIn(entradas);
		Main.main(null);
		
		InputStream salida = new ByteArrayInputStream(outputStreamCaptor.toByteArray());
		Scanner lectorSalida = new Scanner(salida);
		
		String desordenado = testImpre(entrada);
		String ordenado = testImpre(expected);
		
		boolean a=false,b=false;
		
		int contadorOutputs=0;
		while(lectorSalida.hasNextLine()) {
			contadorOutputs++;
			String linea = lectorSalida.nextLine();
			if(linea.contains(desordenado))
				a=true;
			if(linea.contains(ordenado)) 
				b=true;
		}
		assertTrue(a && b && contadorOutputs>=tam+3);
			
		lectorSalida.close();
		
		
	}
	
	@Test
	public void test06erroresCreacionArray() {
		String entradas = "-1\n";
		entradas+="asf\n";
		setIn(entradas);
		
		boolean correcto=false; 
		try {
			Main.creaArray();
		} catch (InputMismatchException e) {
			correcto = true;
		}
		
		if(correcto) {
			correcto=false;
			try {
				Main.creaArray();
			} catch (InputMismatchException e) {
				correcto = true;
			}
		}
		
		assertTrue(correcto);
	}
	
	@Test
	public void test07erroresPoblacionArray() {
		String entradas = "-501\n";
		entradas+="501\n";
		entradas+="asf\n";
		entradas+="-500\n";
		entradas+="0\n";
		entradas+="500\n";
		
		setIn(entradas);
		
		int [] array = new int[3];
		int [] expected = {-500,0,500};
		
		Main.poblarArray(array);
		
		assertArrayEquals(expected, array);
	}
	
	@Test
	public void test08MainGestionErrores() {
		int tam = 100;
		String entradas = "El timo del tocomocho\n";
		entradas += "-10\n";
		entradas += tam+"\n";
		entradas +="asdf\n";
		entradas +="-501\n";
		entradas +="501\n";
		int [] expected = new int [tam];
		int [] entrada = new int [tam];
		for (int i=0,j=tam; i<tam; i++,j--) {
			expected[i]=i+1;
			entrada[i]=j;
			entradas += j + "\n";
		}
		setIn(entradas);
		Main.main(null);
		
		InputStream salida = new ByteArrayInputStream(outputStreamCaptor.toByteArray());
		Scanner lectorSalida = new Scanner(salida);
		
		String desordenado = testImpre(entrada);
		String ordenado = testImpre(expected);
		
		boolean a=false,b=false;
		
		int contadorOutputs=0;
		while(lectorSalida.hasNextLine()) {
			contadorOutputs++;
			String linea = lectorSalida.nextLine();
			if(linea.contains(desordenado))
				a=true;
			if(linea.contains(ordenado)) 
				b=true;
		}
		assertTrue(a && b && contadorOutputs>=tam+8);
			
		lectorSalida.close();
		
		
	}
	
	@After
	public void tearDown() {
	    System.setOut(standardOut);
	}
	
	private void setIn(String entrada) {
		System.setIn(new ByteArrayInputStream(entrada.getBytes()));
		Main.setTeclado();
	}
	
	private String testImpre(int[] array) {
				
		StringBuilder cad = new StringBuilder();
		cad.append('[');
		for (int i = 0; i < array.length; i++) {
			cad.append(array[i]);
			if (i < array.length - 1)
				cad.append(',');
		}
		cad.append(']');
		
		return cad.toString();
	}
}
