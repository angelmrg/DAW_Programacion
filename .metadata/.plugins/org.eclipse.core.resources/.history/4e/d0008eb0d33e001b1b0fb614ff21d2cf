/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package principal;

import java.util.InputMismatchException;
import java.util.Scanner;

public class Main {

	//Cuando necesites leer de consola utiliza este objeto
	private static Scanner teclado = new Scanner(System.in);

	/**
	 * <p>Llamando a la implementación de los métodos codificados realiza un programa
	 * que:</p> 
	 * <p>1 - Cree un array. 
	 * </br>Versión básica. Sin control de errores. 
	 * </br>Versión avanzada. Mientras el usuario Introduzca un valor no válido se repite la
	 * creación del array </p>
	 * <p>2 - Poblar el array </p>
	 * <p>3 - Obtener una copia del array ordenado </p>
	 * <p>4 - imprimir en una línea el Array sin ordenar</p> 
	 * <p>5 - imprimir en una línea el array ordenado</p>
	 * 
	 * <p>NOTA: El main no debe realizar ninguna impresión por consola.
	 * Todas están delegadas en los métodos</p>
	 * 
	 * <p>NOTA 2: Se recomienda empezar por los métodos</p>
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		//TODO Crear Método Main
	}

	/**
	 * El método debe preguntar al usuario de cuantos elementos crear el array,
	 * crearlo y devolverlo.
	 * 
	 * <p>NOTA1: Puedes hacer el método sin control de errores 
	 * aunque no obtendrás esos puntos extra</p>
	 * 
	 * <p>NOTA2: El método solo puede imprimir una única línea por consola</p>
	 * 
	 * @return el array creado
	 * @throws InputMismatchException se lanza si no se introduce un valor correcto para el
	 *                       tamaño del Array, como una cadena, un carácter o un
	 *                       valor negativo 
	 * 
	 */
	public static int[] creaArray() throws InputMismatchException {
		//TODO Crear Método
		return null;
	}

	/**
	 * <p>El método Poblar Array pide un elemento para cada posición del array. 
	 * Lo hace elemento a elemento mostrado el mensaje 
	 * "Intoduce elemento x: " para cada elemento, 
	 * y justo a continuación leyendo el dato.</p>
	 * 
	 * <p>Se debe validar que cada elemento
	 * introducido es un entero entre -500 y 500, ambos inclusive.</br>
	 * En caso de no cumplir con la validación se debe repetir la operación de solicitar dicho
	 * elemento hasta que se introduzca un valor válido</p>
	 * 
	 * <p>NOTA: Puedes hacer el ejercicio sin validación aunque 
	 * no obtendrás esos puntos extra</p>
	 * 
	 * @param array
	 */
	public static void poblarArray(int[] array) {
		
		for (int i = 0; i < array.length; i++) {
			System.out.println("Introducd elemento " + (i+1) + ": ");
			int elemento = teclado.nextInt();
			array[i]= elemento;
		}		
	}

	/**
	 * El método realiza una copia del array que se pasa como parámetro y lo ordena
	 * de forma ascendente
	 * 
	 * @param array a ordenar
	 * @return array COPIA ordenada ascendentemente del array pasado como parámetro
	 */
	public static int[] ordenaArray(int[] array) {
		int []arrayOrdenado = array.clone();  //hacemos la copia de un array
		
		for (int i = 0;  i < arrayOrdenado.length; i++) {
			for (int j = 0; j < arrayOrdenado.length; j++) {
				if(arrayOrdenado[j]<arrayOrdenado[i]){
					int aux = arrayOrdenado[j];
					arrayOrdenado[j] = arrayOrdenado[i];
					arrayOrdenado[i]= aux;
				}
			}
		}
		
		return null;
	}

	/**
	 * <p>El método debe imprimir un array con exactamente el siguiente formato:</p>
	 * <p>[elemen1,elemen2, ...,elemenX]\n</p>
	 * <p>ejemplos: </br>
	 * [] //Array Vacío </br>
	 * [5] //Un único elemento </br>
	 * [5,2,9] //Varios elementos</p>
	 * <p> NOTA: Es muy importante que al final de
	 * la impresión haya una nueva línea</p>
	 * 
	 * @param array Array a imprimir
	 */
	public static void imprimeArray(int[] array) {
		//TODO Crear Método
	}

	/**
	 * @param teclado the teclado to set
	 * NO TOCAR ESTE MÉTODO
	 */
	public static void setTeclado() {
		Main.teclado = new Scanner(System.in);
	}

}
